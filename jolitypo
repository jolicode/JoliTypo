#!/usr/bin/env php
<?php
require __DIR__.'/vendor/autoload.php';

use JoliTypo\Fixer;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Finder\Finder;

(new SingleCommandApplication())
    ->setName('JoliTypo')
    ->setDescription('Fix Microtypography glitches inside your HTML content.')
    ->addArgument('path', InputArgument::REQUIRED, 'Path of file(s) to fix.')
    ->addOption('locale', 'l', InputOption::VALUE_REQUIRED, 'Locale of the content to fix. Ex: "fr_FR"')
    ->addOption('depth', 'd', InputOption::VALUE_OPTIONAL, 'Depth to find files if "path" is a directory.', 1)
    ->addOption('rules', 'r', InputOption::VALUE_IS_ARRAY | InputOption::VALUE_OPTIONAL, 'Set of rules to apply.', [])
    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $io = new SymfonyStyle($input, $output);

        $path = $input->getArgument('path');
        $depth = $input->getOption('depth');
        $locale = $input->getOption('locale');
        $rules = $input->getOption('rules');

        $recommendedRulesByLocale = [
            'en_GB' => ['Ellipsis', 'Dimension', 'Unit', 'Dash', 'SmartQuotes', 'NoSpaceBeforeComma', 'CurlyQuote', 'Hyphen', 'Trademark'],
            'fr_FR' => ['Ellipsis', 'Dimension', 'Unit', 'Dash', 'SmartQuotes', 'FrenchNoBreakSpace', 'NoSpaceBeforeComma', 'CurlyQuote', 'Hyphen', 'Trademark'],
            'fr_CA' => ['Ellipsis', 'Dimension', 'Unit', 'Dash', 'SmartQuotes', 'NoSpaceBeforeComma', 'CurlyQuote', 'Hyphen', 'Trademark'],
            'de_DE' => ['Ellipsis', 'Dimension', 'Unit', 'Dash', 'SmartQuotes', 'NoSpaceBeforeComma', 'CurlyQuote', 'Hyphen', 'Trademark'],
        ];

        if (!is_dir($path) && !file_exists($path)) {
            $io->error(sprintf('The path "%s" does not exist.', $path));
            exit(Command::FAILURE);
        }

        if ($rules) {
            $rules = explode(',', $rules);
        } elseif (array_key_exists($locale, $recommendedRulesByLocale)) {
            $rules = $recommendedRulesByLocale[$locale];
        } else {
            $io->error(sprintf('There is no recommended rules for "%s" locale. Please specify manually the rules to apply.', $locale));
            exit(Command::FAILURE);
        }

        $fixer = new Fixer($rules);
        $fixer->setLocale($locale);

        if (is_dir($path)) {
            $finder = new Finder();

            foreach ($finder->path($path)->depth($depth)->files() as $file) {
                $fixedContent = $fixer->fix(file_get_contents($file->getRealPath()));
                file_put_contents($file->getRealPath(), $fixedContent);
            }

            $io->success(sprintf('All files in "%s" has been fixed with success!', $path));
        } elseif (is_file($path)) {
            $fixedContent = $fixer->fix(file_get_contents($path));
            file_put_contents($path, $fixedContent);

            $io->success(sprintf('"%s" content has been fixed with success!', $path));
        }
    })
    ->run();
